PORTNAME=	curl
DISTVERSION=	8.15.0
PORTREVISION=	1
CATEGORIES=	ftp net www
MASTER_SITES=	https://github.com/${PORTNAME}/${PORTNAME}/releases/download/curl-${DISTVERSION:S|.|_|g}/ \
		https://curl.se/download/

#PATCH_SITES=	https://github.com/curl/curl/commit/
#PATCHFILES=	71bb004c29631117ab03d90a4214d1515da5a895.patch:-p1 \
#		d16ccbd55de80c271fe822f4ba8b6271fd9166ff.patch:-p1 \
#		4c6b74e1e8dfe3ebe681f5be9a5dd7d684e285c7.patch:-p1

MAINTAINER=	sunpoet@FreeBSD.org
COMMENT=	Command line tool and library for transferring data with URLs
WWW=		https://curl.se/ \
		https://github.com/curl/curl

LICENSE=	MIT
LICENSE_FILE=	${WRKSRC}/COPYING

USES=		cmake:testing cpe pathfix perl5 \
		pkgconfig python:test shebangfix tar:xz
CPE_VENDOR=	haxx
USE_PERL5=	test
SHEBANG_GLOB=	*.pl *.py
USE_LDCONFIG=	yes

CMAKE_TESTING_ON=	BUILD_TESTING \
			CURL_TEST_BUNDLES
CMAKE_TESTING_TARGET=	test-nonflaky

CMAKE_ON=	CMAKE_BUILD_RPATH_USE_ORIGIN \
		USE_SSLS_EXPORT
CMAKE_OFF=	BUILD_TESTING
CMAKE_ARGS=	-DCMAKE_DEBUG_POSTFIX="" \
		-DCURL_CA_BUNDLE=none \
		-DCURL_CA_PATH=none \

OPTIONS_DEFINE=	ALTSVC COOKIES CURLDEBUG DOCS DEBUG EXAMPLES FISH IDN \
		IPV6 LIBUV MANPAGES NTLM PROXY PSL STATIC TLS_SRP ZSH
OPTIONS_GROUP=	COMPRESSION PROTOCOL
OPTIONS_GROUP_COMPRESSION=	BROTLI ZSTD
OPTIONS_GROUP_PROTOCOL=	DICT FTP GOPHER HTTP HTTP2 IMAP IPFS LDAP LDAPS \
		LIBSSH LIBSSH2 MQTT POP3 RTSP SMB SMTP TELNET TFTP \
		WEBSOCKETS
OPTIONS_RADIO=	SSL
OPTIONS_RADIO_SSL=	GNUTLS OPENSSL WOLFSSL
OPTIONS_SINGLE=	GSSAPI RESOLV
OPTIONS_SINGLE_GSSAPI=	GSSAPI_BASE GSSAPI_HEIMDAL GSSAPI_MIT GSSAPI_NONE
OPTIONS_SINGLE_RESOLV=	CARES THREADED_RESOLVER
OPTIONS_DEFAULT=ALTSVC BROTLI COOKIES \
		GSSAPI_${${SSL_DEFAULT} == base :?BASE :NONE} DICT FTP \
		GOPHER HTTP HTTP2 IDN IMAP IPFS LIBSSH2 MANPAGES NTLM \
		OPENSSL POP3 PROXY PSL RTSP SMTP STATIC TELNET TFTP \
		THREADED_RESOLVER TLS_SRP WEBSOCKETS ZSH ZSTD
OPTIONS_SUB=	yes

ALTSVC_DESC=	HTTP Alternative Services support
COOKIES_DESC=	Cookies support
CURLDEBUG_DESC=	Enable TrackMemory debug
DICT_DESC=	DICT (RFC 2229) support
HTTP_DESC=	HTTP/HTTPS support
IMAP_DESC=	IMAP/IMAPS support
IPFS_DESC=	IPFS support
LIBSSH_DESC=	SCP/SFTP support via libssh
LIBSSH2_DESC=	SCP/SFTP support via libssh2
LIBUV_DESC=	Event-based tests
MQTT_DESC=	MQTT support
POP3_DESC=	POP3/POP3S support
RESOLV_DESC=	DNS resolving options
SMB_DESC=	SMB/CIFS support
SMTP_DESC=	SMTP/SMTPS support
THREADED_RESOLVER_DESC=	Threaded DNS resolver
TLS_SRP_DESC=	TLS-SRP (Secure Remote Password) support
WEBSOCKETS_DESC=WebSocket support

ALTSVC_CMAKE_BOOL_OFF=	CURL_DISABLE_ALTSVC
ALTSVC_IMPLIES=		HTTP

BROTLI_LIB_DEPENDS=	libbrotlidec.so:archivers/brotli
BROTLI_CMAKE_BOOL=	CURL_BROTLI

CARES_LIB_DEPENDS=	libcares.so:dns/c-ares
CARES_CMAKE_BOOL=	ENABLE_ARES

COOKIES_CMAKE_BOOL_OFF=	CURL_DISABLE_COOKIES

CURLDEBUG_CMAKE_BOOL=	ENABLE_CURLDEBUG

DEBUG_CMAKE_BOOL=	ENABLE_DEBUG

DICT_CMAKE_BOOL_OFF=	CURL_DISABLE_DICT

FISH_USE=		PERL5=build
FISH_CMAKE_BOOL=	CURL_COMPLETION_FISH

FTP_CMAKE_BOOL_OFF=	CURL_DISABLE_FTP

GNUTLS_LIB_DEPENDS=	libgnutls.so:security/gnutls \
			libnettle.so:security/nettle
GNUTLS_CMAKE_BOOL=	CURL_CA_FALLBACK CURL_USE_GNUTLS

GOPHER_CMAKE_BOOL_OFF=	CURL_DISABLE_GOPHER

GSSAPI_BASE_USES=	gssapi
GSSAPI_BASE_CMAKE_ON=	-DCURL_USE_GSSAPI:BOOL=ON \
			-DGSS_ROOT_DIR:STRING=${GSSAPIBASEDIR}

GSSAPI_HEIMDAL_USES=	gssapi:heimdal
GSSAPI_HEIMDAL_CMAKE_ON=-DCURL_USE_GSSAPI:BOOL=ON \
			-DGSS_ROOT_DIR:STRING=${GSSAPIBASEDIR}

GSSAPI_MIT_USES=	gssapi:mit
GSSAPI_MIT_CMAKE_ON=	-DCURL_USE_GSSAPI:BOOL=ON \
			-DGSS_ROOT_DIR:STRING=${GSSAPIBASEDIR}

HTTP_CMAKE_BOOL_OFF=	CURL_DISABLE_HTTP

HTTP2_LIB_DEPENDS=	libnghttp2.so:www/libnghttp2
HTTP2_CMAKE_BOOL=	USE_NGHTTP2
HTTP2_IMPLIES=		HTTP

IDN_LIB_DEPENDS=	libidn2.so:dns/libidn2
IDN_CMAKE_BOOL=		USE_LIBIDN2

IMAP_CMAKE_BOOL_OFF=	CURL_DISABLE_IMAP

IPFS_CMAKE_BOOL_OFF=	CURL_DISABLE_IPFS
IPFS_IMPLIES=		HTTP

IPV6_CMAKE_BOOL=	ENABLE_IPV6

LDAP_USES=		ldap
LDAP_CMAKE_BOOL_OFF=	CURL_DISABLE_LDAP

LDAPS_CMAKE_BOOL_OFF=	CURL_DISABLE_LDAPS
LDAPS_IMPLIES=		LDAP

LIBSSH_LIB_DEPENDS=	libssh.so:security/libssh
LIBSSH_CMAKE_BOOL=	CURL_USE_LIBSSH

LIBSSH2_LIB_DEPENDS=	libssh2.so:security/libssh2
LIBSSH2_CMAKE_BOOL=	CURL_USE_LIBSSH2

LIBUV_LIB_DEPENDS=	libuv.so:devel/libuv
LIBUV_CMAKE_BOOL=	CURL_USE_LIBUV
LIBUV_IMPLIES=		DEBUG

MANPAGES_USE=		PERL5=build
MANPAGES_CMAKE_BOOL=	BUILD_LIBCURL_DOCS \
			BUILD_MISC_DOCS \
			ENABLE_CURL_MANUAL

MQTT_CMAKE_BOOL_OFF=	CURL_DISABLE_MQTT

NTLM_CMAKE_BOOL_OFF=	CURL_DISABLE_NTLM

OPENSSL_USES=		ssl
OPENSSL_CMAKE_BOOL=	CURL_CA_FALLBACK CURL_USE_OPENSSL

POP3_CMAKE_BOOL_OFF=	CURL_DISABLE_POP3

PROXY_CMAKE_BOOL_OFF=	CURL_DISABLE_PROXY
PROXY_IMPLIES=		HTTP

PSL_LIB_DEPENDS=	libpsl.so:dns/libpsl
PSL_CMAKE_BOOL=		CURL_USE_LIBPSL

RTSP_CMAKE_BOOL_OFF=	CURL_DISABLE_RTSP
RTSP_IMPLIES=		HTTP

SMB_CMAKE_BOOL_OFF=	CURL_DISABLE_SMB

SMTP_CMAKE_BOOL_OFF=	CURL_DISABLE_SMTP

STATIC_CMAKE_BOOL=	BUILD_STATIC_LIBS

TELNET_CMAKE_BOOL_OFF=	CURL_DISABLE_TELNET

TFTP_CMAKE_BOOL_OFF=	CURL_DISABLE_TFTP

THREADED_RESOLVER_CMAKE_BOOL=	ENABLE_THREADED_RESOLVER

TLS_SRP_CMAKE_BOOL_OFF=	CURL_DISABLE_SRP

WEBSOCKETS_CMAKE_BOOL_OFF=	CURL_DISABLE_WEBSOCKETS

WOLFSSL_LIB_DEPENDS=	libwolfssl.so:security/wolfssl
WOLFSSL_CMAKE_BOOL=	CURL_USE_WOLFSSL

ZSH_USE=		PERL5=build
ZSH_CMAKE_BOOL=		CURL_COMPLETION_ZSH

ZSTD_LIB_DEPENDS=	libzstd.so:archivers/zstd
ZSTD_CMAKE_BOOL=	CURL_ZSTD

.include <bsd.port.pre.mk>

.if ((!${PORT_OPTIONS:MGNUTLS} && !${PORT_OPTIONS:MOPENSSL}) || (${PORT_OPTIONS:MOPENSSL} && ${SSL_DEFAULT:Mlibressl*})) && ${PORT_OPTIONS:MTLS_SRP}
IGNORE=		only supports TLS-SRP with either GnuTLS or OpenSSL
.endif

.if ${PORT_OPTIONS:MLDAPS} && !${PORT_OPTIONS:MGNUTLS} && !${PORT_OPTIONS:MOPENSSL} && !${PORT_OPTIONS:MWOLFSSL}
IGNORE=		only supports LDAPS with GnuTLS/OpenSSL/wolfSSL
.endif

post-patch:
	@${REINPLACE_CMD} -e 's|%%CMAKE_TESTING_PARALLEL_LEVEL%%|${CMAKE_TESTING_PARALLEL_LEVEL}|g' \
	    ${PATCH_WRKSRC}/tests/CMakeLists.txt

post-install:
	${INSTALL_DATA} ${WRKSRC}/docs/libcurl/libcurl.m4 ${STAGEDIR}${PREFIX}/share/aclocal/
#	${RM} ${STAGEDIR}${PREFIX}/bin/mk-ca-bundle.pl
	# .cmake files are a bit broken so skip these for now and FindCURL is
	# a part of CMake(-core) so we still provide suitable facilities
	${RM} -r ${STAGEDIR}${PREFIX}/lib/cmake

post-install-DOCS-on:
	${MKDIR} ${STAGEDIR}${DOCSDIR}/ ${STAGEDIR}${DOCSDIR}/internals/ ${STAGEDIR}${DOCSDIR}/libcurl/
	(cd ${WRKSRC}/docs/ && ${INSTALL_DATA} FAQ INSTALL KNOWN_BUGS THANKS TODO options-in-versions *.md ${STAGEDIR}${DOCSDIR}/)
	${INSTALL_DATA} ${WRKSRC}/docs/internals/*.md ${STAGEDIR}${DOCSDIR}/internals/
	(cd ${WRKSRC}/docs/libcurl/ && ${INSTALL_DATA} ABI.md libcurl.m4 *.pl symbols-in-versions ${STAGEDIR}${DOCSDIR}/libcurl/)

post-install-EXAMPLES-on:
	${MKDIR} ${STAGEDIR}${EXAMPLESDIR}/
	(cd ${WRKSRC}/docs/examples/ && ${INSTALL_DATA} Makefile.example README.md *.c *.cpp ${STAGEDIR}${EXAMPLESDIR}/)

post-install-MANPAGES-on:
	${RM} ${STAGEDIR}${PREFIX}/share/man/man1/mk-ca-bundle.1

.include <bsd.port.post.mk>
